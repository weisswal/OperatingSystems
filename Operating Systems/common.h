// The classes in this header define the common interface between your implementation and 
// the testing environment. Exactly the same implementation is present in the progtest's 
// testing environment. You are not supposed to modify any declaration in this file, 
// any change is likely to break the compilation.
#ifndef COMMON_H_98273465234756283645234625356
#define COMMON_H_98273465234756283645234625356

#include <cstdint>
#include <memory>
#include <string>
#include <vector>
#include <list>
#include <map>


//=============================================================================================================================================================
class CRange
{
  public:
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    constexpr                          CRange                                 ( int                                    lo,
                                                                                int                                    hi )
      : m_Lo ( lo ),
        m_Hi ( hi )
    {
    }
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    bool                               operator <                             ( const CRange                         & src ) const
    {
      return std::tie ( m_Lo, m_Hi ) < std::tie ( src . m_Lo, src . m_Hi );
    }
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    bool                               operator ==                            ( const CRange                         & src ) const
    {
      return std::tie ( m_Lo, m_Hi ) == std::tie ( src . m_Lo, src . m_Hi );
    }
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    int                                m_Lo;
    int                                m_Hi;
};
//=============================================================================================================================================================
class CSheet
{
  public:
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
                                       CSheet                                  ( int                                   width,
                                                                                 int                                   length,
                                                                                 std::initializer_list<int>            thickness )
      : m_Width ( width ),
        m_Length ( length ),
        m_Thickness ( thickness )
    {
      m_Thickness . resize ( width * length, 0 );
    }
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    virtual                            ~CSheet                                 ( void ) noexcept = default;
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    void                               updateRelDev                            ( double                                relDevMax,
                                                                                 int                                   area )
    {
      for ( auto & [ xDev, xArea ] : m_RelDev )
        if ( xDev == relDevMax )
        {
          xArea = std::max ( xArea, area );
          break;
        }
    }
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    void                               updateVolume                            ( int64_t                               volumeMax,
                                                                                 int                                   area )
    {
      if ( m_Volume . count ( volumeMax ) > 0 )
        m_Volume[volumeMax] = area;
    }
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    void                               updateMinMax                            ( CRange                                range,
                                                                                 int                                   area )
    {
      if ( m_MinMax . count ( range ) > 0 )
        m_MinMax[range] = area;
    }
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    int                                m_Width;
    int                                m_Length;
    std::vector<int>                   m_Thickness;
    std::list<std::pair<double, int> > m_RelDev;
    std::map<int64_t, int>             m_Volume;
    std::map<CRange, int>              m_MinMax;
};
using ASheet = std::shared_ptr<CSheet>;
//=============================================================================================================================================================
class CProductionLine
{
  public: 
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
                                       CProductionLine                         ( void ) = default;
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    virtual                            ~CProductionLine                        ( void ) noexcept = default;
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    virtual ASheet                     getSheet                                ( void ) = 0;
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
    virtual void                       doneSheet                               ( ASheet                                x ) = 0;
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
};
using AProductionLine = std::shared_ptr<CProductionLine>;
//=============================================================================================================================================================
#endif /* COMMON_H_98273465234756283645234625356 */
